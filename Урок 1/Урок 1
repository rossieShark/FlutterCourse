/*
Задача 1
Есть метод (findFirstUniqueNumber), который принимает в себя массив целочисленных значений. Задача: найти в этом массиве первый уникальный элемент, если такой есть. В противном случае вернуть -1.
int findFirstUniqueNumber (List<int> array) {
  // TODO Implement method
}
*/
//1 метод решения 
int findFirstUniqueNumber (List<int> array) {
    //проходимся по массиву (именно по значениям)
    for (var i in array) {
        //получить индекс первого встречного элемента по введенному элементу
        final item = array.indexOf(i);
        //получить индекс первого встречного элемента по введенному элементу c конца
        if (item == array.lastIndexOf(i)) {
            return array[item];
        }
    }
    return -1;
}

List<int> array1 = [1, 5, 7, 3, 5, 3, 8, 7, 1];
List<int> array2 = [1];
List<int> array3 = [1, 1];
List<int> array4 = [];

void main() {
    print(findFirstUniqueNumber(array1));  //8
    print(findFirstUniqueNumber(array2));  //1
    print(findFirstUniqueNumber(array3));  //-1
    print(findFirstUniqueNumber(array4));  //-1
}

//2 метод решения  - через contains & remove
int findFirstUniqueNumber (List<int> array) {
    List<int> resultArray = [];
    //проходимся по массиву с 0 до array.length - 1
    for (var i = 0; i < array.length; i++) {
        //получим true если список содержит элемент введенный в contains
        if (resultArray.contains(array[i])) {
            //удаляет указанный элемент из списка
            resultArray.remove(array[i]);
        } else {
            //добавляем новый элемент по индексу
            resultArray.add(array[i]);
        }
    }
    return resultArray.isEmpty ? -1 : resultArray.first;
}

List<int> array1 = [1, 5, 7, 3, 5, 3, 8, 7, 1];
List<int> array2 = [1];
List<int> array3 = [1, 1];
List<int> array4 = [];

void main() {
    print(findFirstUniqueNumber(array1));  //8
    print(findFirstUniqueNumber(array2));  //1
    print(findFirstUniqueNumber(array3));  //-1
    print(findFirstUniqueNumber(array4));  //-1


/*
Задача 2
Есть метод findIndexesGivesSum. Он принимает массив целочисленных значений и целое число. Нужно найти два элемента в массиве, которые при сложении дают эту сумму и вывести массив, состоящий из индексов этих двух элементов.
List<int> findIndexesGivesSum(List<int> array, int sum) {
  // TODO Implement method
}
*/
//Решаем через хэш-таблицы

List<int> findIndexesGivesSum(List<int> array, int sum) {
    // Создаем вспомогательные массив и dictionary
    List <int> resultArray = [];
    Map <int, int> dictionary = {};
    for (var i = 0; i < array.length; i++) {
        var index = sum - array[i];
        if (dictionary.containsKey(index)) {
            var keyValue = dictionary[index]!;
            resultArray = [keyValue, i];
            return resultArray;
        }
        dictionary[array[i]] = i;
    }
    return resultArray;
}
  
  
List<int> array1 = [1, 5, 7, 8, 9, 6];
List<int> array2 = [5, 5];
List<int> array3 = [0, 1];
List<int> array4 = [1];

void main() {
    print(findIndexesGivesSum(array1, 13)); //[1, 3]
    print(findIndexesGivesSum(array2, 10)); //[0, 1]
    print(findIndexesGivesSum(array3, 1));  //[0, 1]
    print(findIndexesGivesSum(array4, 1));  //[]
}

/*
Задача 3
Есть метод findNod. Он принимает два целых числа. Используя алгоритм Евклида, или любой другой алгоритм, нужно найти наибольший общий делитель этих двух чисел.
List<int> findNod(int a, int b) {
  // TODO Implement method
}
*/
// Решала по методу Евклида, оказался очень легкий алгоритм. Спасибо за подсказку!
/*Алгоритм нахождения НОД делением
    Большее число делим на меньшее.
    Если делится без остатка, то меньшее число и есть НОД (следует выйти из цикла).
    Если есть остаток, то большее число заменяем на остаток от деления.
    Переходим к пункту 1.
/*


int findNod (int first, int second) {
    while (first != 0 && second != 0){
        if (first > second) {
            first %= second;
        } else {
            second %= first;
        }
    }
    return first + second;
}
  
void main() {
    print(findNod(45, 60));  //15
    print(findNod(13, 26));  //13
    print(findNod(11, 17));  //1
    print(findNod(0, 0));    //0
}

/*
Задача 4
Есть метод romanToInt, который принимает строку. Строка – это римское число. Римское число состоит из следующих букв: I – 1, V – 5, X – 10, L – 50, C – 100, D – 500, M – 1000. Нужно вернуть число в привычном целочисленном виде.
int romanToInt(String roman) {
  // TODO Implement method
}
*/

int romanToInt(String roman) {
    int result = 0;
    var previousItem = "";
    List<String> array = roman.split("");
    final map = <String, int> {
        'I': 1,
        'V': 5,
        'X': 10,
        'L': 50,
        'C': 100,
        'D': 500,
        'M': 1000,
    };
    for (final item in array) {
        if (previousItem == "I" && (item == "V" || item == "X")) {
			result += (map[item]! - 2 * map[previousItem]!);
		} else if (previousItem == "X" && (item == "L" || item == "C")) {
			result += (map[item]! - 2 * map[previousItem]!); 
		} else if (previousItem == "C" && (item == "D" || item == "M")) {
			result += (map[item]! - 2 * map[previousItem]!);
		} else {
			result += map[item]!;
		}
		previousItem = item;
	}    
    return result;
}
  

void main() {
    print(romanToInt("XIIIV"));       //16
    print(romanToInt("XX"));          //20
    print(romanToInt("IVIX"));        //13
    print(romanToInt("MCMXCVIII"));   //1998
}

//Хотела еще попробовать через switch-case попробовать, но не смогла засунуть 2 переменные под switch-блок.. Может есть варианты, была бы рада, если прокомментировали.

/*
Задача 5
Есть метод intToRoman, который принимает целое число и возвращает строку. Пользуясь инструкцией из задачи 4, реализуйте метод, который переводит целочисленное значение в строку – римское число.
String intToRoman(int number) {
  // TODO Implement method
}
*/

String intToRoman(int number) {
    List<int> nums = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];
    List<String> latinNums = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I'];
    String result = '';
    for (int i = 0; i < nums.length; i++) {
        while (number >= nums[i]) {
            number -= nums[i];
            result += latinNums[i];
        }
    }
    return result;
}
void main() {
    print(intToRoman(16));    //XVI
    print(intToRoman(20));    //XX
    print(intToRoman(13));    //XIII
    print(intToRoman(1998));  //MCMXCVIII
}
